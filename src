Ember.TEMPLATES["admin/assets/javascripts/adminConsole.js"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  


  data.buffer.push("var get = Ember.get\r\n  , set = Ember.set\r\n  , copy = Ember.copy;\r\n\r\n//Ember App Creation\r\nvar App = Ember.Application.create({\r\n  rootElement: \"#admin-content\"\r\n});\r\n\r\nEmber.Handlebars.registerBoundHelper('prettyDate', function (date) {\r\n  return moment(date).format(\"MMMM Do YYYY\");\r\n});\r\n\r\n\r\n\r\n\r\n//Routes\r\nApp.Router.map(function(){\r\n  this.resource(\"matches\", function(){\r\n    this.route(\"match\", {path: ':match_id'});\r\n    this.route(\"test\");\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\nApp.MatchesTestRoute = Ember.Route.extend({\r\n  enter: function(){\r\n    console.log(\"enter\");\r\n  },\r\n  renderTemplate: function(){\r\n    this.render('test',{\r\n      into: 'application'\r\n    });\r\n  }\r\n});\r\n\r\n\r\nApp.IndexRoute = Ember.Route.extend({\r\nenter: function(){\r\n    var self = this;\r\n    var indexCon = this.controllerFor('index');\r\n    \r\n    var matches = get(indexCon, 'matches');\r\n    matches.clear();\r\n    \r\n    var people = get(indexCon, 'people');\r\n    people.clear();\r\n    \r\n    var events = get(indexCon, 'events');\r\n    events.clear();\r\n    \r\n    var users = get(indexCon, 'users');\r\n    users.clear();\r\n    \r\n    fetchMatches()\r\n    .then(function(results){\r\n      matches.pushObjects(results.matches);\r\n    });\r\n    \r\n    fetchPeople()\r\n    .then(function(results){\r\n      people.pushObjects(results.people.sortBy(\"name\"));\r\n    });\r\n    \r\n    fetchEvents()\r\n    .then(function(results){\r\n      events.pushObjects(results.events.sortBy(\"name\"));\r\n      window.evnts = results.events;\r\n    }); \r\n    fetchUsers()\r\n    .then(function(results){\r\n      users.pushObjects(results.users.sortBy(\"email\"));\r\n    }); \r\n  }\r\n});\r\n\r\nApp.IndexController = Ember.Controller.extend({\r\n  matches: [],\r\n  people: [],\r\n  events: [],\r\n  users: []\r\n\r\n});\r\n\r\nApp.MatchesMatchRoute = Ember.Route.extend({\r\n  isEditingMatch: false,\r\n  enter: function(){\r\n    var matchCon = this.controllerFor('matches');\r\n    matchCon.set(\"masterView\", false);\r\n    this.send(\"populateItems\");  \r\n  },\r\n  model: function(params){\r\n    var self = this;\r\n    //sets route model and puts it on matches controller for the\r\n    //component to use\r\n    fetchMatches().then(function(results){\r\n      window.match = results.matches.findBy(\"_id\", params.match_id);\r\n      var matchCon = self.controllerFor('matches');\r\n      matchCon.set(\"match\", match);\r\n      return match;\r\n    })\r\n  },\r\n  actions:{\r\n    editMatch: function(){\r\n      this.controllerFor('matches').set('isEditingMatch', true);\r\n    },\r\n    doneEditingMatch: function(){\r\n      this.controllerFor('matches').set('isEditingMatch', false)\r\n    }\r\n  }\r\n});\r\n\r\nApp.MatchesIndexRoute = Ember.Route.extend({\r\n  enter: function(){  \r\n    var matchCon = this.controllerFor('matches');  \r\n    matchCon.set(\"masterView\", true);\r\n    this.send(\"populateItems\");\r\n  }\r\n});\r\n\r\nApp.MatchesRoute = Ember.Route.extend({\r\n  renderTemplate: function(){\r\n    this.render('matches',{\r\n      into: 'application'\r\n    });\r\n  },\r\n  sendMatchToServer: function(match){\r\n  \r\n  },\r\n  populateItems: function(){\r\n    var self = this;\r\n    var matchCon = this.controllerFor('matches');\r\n   \r\n    var matches = get(matchCon, 'matches');\r\n    matches.clear();\r\n    \r\n    var people = get(matchCon, 'people');\r\n    people.clear();\r\n    \r\n    var events = get(matchCon, 'events');\r\n    events.clear();\r\n    \r\n    var characters = get(matchCon, 'characters');\r\n    characters.clear();\r\n    \r\n    fetchMatches()\r\n    .then(function(results){\r\n      matches.pushObjects(results.matches);\r\n    });\r\n    \r\n    fetchPeople()\r\n    .then(function(results){\r\n      people.pushObjects(results.people.sortBy(\"name\"));\r\n    });\r\n    \r\n    fetchEvents()\r\n    .then(function(results){\r\n      events.pushObjects(results.events.sortBy(\"name\"));\r\n      window.evnts = results.events;\r\n    }); \r\n    \r\n    //seems slightly wrong for multiple game types\r\n    //doesn't seem to be an array\r\n    //works for now as the default 1 game Sf4\r\n    fetchGames()\r\n    .then(function(results){\r\n      window.res = results;\r\n      characters.pushObjects(results.games[\"1\"].characters.sortBy(\"name\"));\r\n    });\r\n  }, \r\n  actions:{\r\n    populateItems: function(){\r\n      this.populateItems();\r\n    }\r\n  }\r\n});\r\n\r\n\r\n//Controllers\r\nApp.MatchesController = Ember.Controller.extend({\r\n  masterView: true,\r\n  matches: [],\r\n  events: [],\r\n  characters: [],\r\n  people: [],\r\n  actions:{\r\n    deleted: function(){\r\n      this.transitionToRoute('matches');\r\n    },\r\n\r\n    updateInfo: function(){\r\n\r\n      var people = get(this, 'people');\r\n      people.clear();\r\n      \r\n      var events = get(this, 'events');\r\n      events.clear();\r\n      \r\n      fetchPeople()\r\n      .then(function(results){\r\n        people.pushObjects(results.people.sortBy(\"name\"));\r\n      });\r\n    \r\n      fetchEvents()\r\n      .then(function(results){\r\n        events.pushObjects(results.events.sortBy(\"name\"));\r\n        window.evnts = results.events;\r\n      }); \r\n    }\r\n  }\r\n});\r\n\r\n//Components\r\nApp.FcAdminMatchesComponent = Ember.Component.extend({\r\n  matches: []\r\n});\r\n\r\nApp.FcAdminCreateComponent = Ember.Component.extend({\r\n\r\n  data: {\r\n    title: \"\",\r\n    description: \"\",\r\n    casters: null,\r\n    game: \"\",\r\n    category: \"\",\r\n    fighters: [],\r\n    videoData: [],\r\n    event: null,\r\n    playedAt: null\r\n  },\r\n  games: [\"SF4\"],\r\n  characters: [],\r\n  categories: [\"pro\", \"scrub\", \"community\"],\r\n  errors: {\r\n    title: \"\",\r\n    game: \"\",\r\n    eventName: \"\",\r\n    fighters: \"\",\r\n    casters: \"\",\r\n    videoData: \"\"\r\n  },\r\n  actions: {\r\n    onSubmit: function(data){\r\n      var data = {\r\n        title: get(data, \"title\"),\r\n        game: get(data, \"game\"),\r\n        description: get(data, \"description\"),\r\n        fighters: convertFighterFieldsToIds(get(data, \"fighters\")),\r\n        event: get(data, \"event._id\"),\r\n        casters: get(data, \"casters\").mapBy(\"_id\"),\r\n        videos: get(data, \"videoData\"), \r\n        playedAt: get(data, \"playedAt\"),\r\n        category: get(data, \"category\"),\r\n      }\r\n          \r\n      var self = this;\r\n      var titleError = validateTitle(data.title);\r\n      var gameError = validateGame(data.game);\r\n      var fighterError = validateFighterData(data.fighters);\r\n      var videoDataError = validateVideoData(data.videos);\r\n      var categoryError = validateCategory(data.category);\r\n\r\n      set(this, \"errors.title\", titleError);\r\n      set(this, \"errors.game\", gameError);\r\n      set(this, \"errors.fighters\", fighterError);\r\n      set(this, \"errors.videoData\", videoDataError);\r\n      set(this, \"errors.category\", categoryError);\r\n      \r\n      if (titleError || gameError || fighterError\r\n        ||categoryError|| videoDataError) return;;\r\n      \r\n      set(self, \"inFlight\", true);\r\n      submitMatch(data)\r\n      .then(function (res) {\r\n        console.log(\"yoyoyoyo\", res);\r\n        set(self, \"inFlight\", false);\r\n        //window.location.reload();\r\n      })\r\n      .fail(function (err) {\r\n        set(self, \"inFlight\", false);\r\n        console.log(\"boo\", err);\r\n      });\r\n    }\r\n  }\r\n})\r\n\r\nApp.FcAdminEditDetailsComponent = Ember.Component.extend({\r\n  didInsertElement:function(){\r\n    console.log(this.get('people'));\r\n    this.initializeData();\r\n  },\r\n  categories: [\"pro\", \"scrub\", \"community\"],\r\n  games:[\"SF4\"],\r\n\r\n  // game hardcoded still for now\r\n  initializeData: function(){\r\n    var match = this.get('match');\r\n    var data = this.get('data');\r\n    vidList = [];\r\n    \r\n    if(match){\r\n      get(match,'videos').forEach(function(vid){\r\n       vidList.push({\"url\": vid});\r\n      });\r\n      \r\n      if (get(match,'title'))\r\n        set(data, 'title', get(match,'title'));\r\n      if (get(match,'description'))\r\n        set(data,'description', get(match,'description'));\r\n      if (get(match,'casters'))  \r\n        set(data,'casters', get(match,'casters'));\r\n      set(data,'game', get(match,'game'));\r\n      if (get(match,'event'))\r\n        set(data,'event', get(match,'event'));\r\n      set(data,'category', get(match,'category'));\r\n      if (get(match,'playedAt'))\r\n        set(data,'playedAt', get(match,'playedAt').slice(0,10));\r\n      set(data,'fighters', get(match,'fighters'));\r\n      set(data,'videoData', vidList);\r\n    }\r\n  },\r\n  data: {\r\n    title: \"\",\r\n    description: \"\",\r\n    casters: null,\r\n    game: \"1\",\r\n    category: \"\",\r\n    fighters: [],\r\n    videoData: [],\r\n    event: null,\r\n    playedAt: null\r\n  }, \r\n  errors: {\r\n    title: \"\",\r\n    game: \"\",\r\n    eventName: \"\",\r\n    fighters: \"\",\r\n    casters: \"\",\r\n    videoData: \"\"\r\n  },\r\n  actions:{\r\n    doneEditing: function(){\r\n      var self = this;\r\n      var data = this.get(\"data\");\r\n      \r\n      window.thisdata = data;\r\n      \r\n      var dataToSend = {\r\n        title: get(data, \"title\"),\r\n        game: get(data, \"game\"),\r\n        description: get(data, \"description\"),\r\n        fighters: convertFighterFieldsToIds(get(data, \"fighters\")),\r\n        event: get(data, \"event._id\"),\r\n        casters: get(data, \"casters\").mapBy(\"_id\"),\r\n        videos: get(data, \"videoData\"), \r\n        playedAt: get(data, \"playedAt\"),\r\n        category: get(data, \"category\"),\r\n      };\r\n      \r\n      window.data2 = dataToSend;\r\n      \r\n      var titleError = validateTitle(dataToSend.title);\r\n      var gameError = validateGame(dataToSend.game);\r\n      var fighterError = validateFighterData(dataToSend.fighters);\r\n      var videoDataError = validateVideoData(dataToSend.videos);\r\n      var categoryError = validateCategory(dataToSend.category);\r\n\r\n      set(this, \"errors.title\", titleError);\r\n      set(this, \"errors.game\", gameError);\r\n      set(this, \"errors.fighters\", fighterError);\r\n      set(this, \"errors.videoData\", videoDataError);\r\n      set(this, \"errors.category\", categoryError);\r\n      \r\n      \r\n      if (titleError || gameError || fighterError\r\n        ||categoryError|| videoDataError) return;\r\n      \r\n      set(self, \"inFlight\", true);\r\n      updateMatch(dataToSend, get(this, 'match'))\r\n      .then(function (res) {\r\n        console.log(\"yoyoyoyo\", res);\r\n        set(self, \"inFlight\", false);\r\n        //self.sendAction();\r\n        //window.location.reload();\r\n        window.respo = res;\r\n      })\r\n      .fail(function (err) {\r\n        set(self, \"inFlight\", false);\r\n        console.log(\"boo\", err);\r\n      })\r\n    }  \r\n  }\r\n});\r\n\r\n\r\nApp.FcAdminDetailsComponent = Ember.Component.extend({\r\n  \r\n  actions:{\r\n    editMatch: function(){\r\n      this.sendAction(\"editMatch\");\r\n    },\r\n    makeFeatured: function(match){\r\n      console.log(get(match, \"_id\"));\r\n      makeMatchFeatured(match)\r\n      .then(function(results){\r\n        if(results.featuredMatch){\r\n          window.location.reload();\r\n        }\r\n      });\r\n    },\r\n    deleteMatch: function(match){\r\n      var self = this;\r\n      deleteMatch(match)\r\n      .then(function(results){\r\n        console.log(results);\r\n        if (results.deletedMatch){\r\n          self.sendAction();\r\n        }\r\n      })\r\n    }\r\n  }  \r\n});\r\n\r\n\r\n\r\nApp.FcAdminSubheaderComponent = Ember.Component.extend({\r\n  data: {\r\n    country: \"\",\r\n    name: \"\",\r\n    character: \"\"\r\n  },\r\n  inFlight: false,\r\n  resetFields:function(){\r\n    var data = this.get(\"data\");\r\n    set(this,\"data.country\", \"\");\r\n    set(this,\"data.name\", \"\");   \r\n    set(this,\"data.character\", \"\");   \r\n  },\r\n  updateInfo: function(){\r\n    this.sendAction();\r\n  },\r\n  actions:{\r\n    onSubmit: function(data, type){\r\n      var self = this;\r\n      set(self, \"inFlight\", true);\r\n      submitData(data, type)\r\n      .then(function (res) {\r\n       self.resetFields();\r\n       self.updateInfo();\r\n       set(self, \"inFlight\", false);\r\n      })\r\n      .fail(function(err){\r\n        set(self, \"inFlight\", false);\r\n        console.log(\"Error\", err);\r\n        self.updateInfo();\r\n        self.resetFields();\r\n      });\r\n    }\r\n  }\r\n})\r\n\r\nApp.FcCreateFighterFormComponent = Ember.Component.extend({\r\n  newFighter: {\r\n    person: \"\",\r\n    characters: []\r\n  },\r\n  \r\n  actions:{\r\n    createFighter: function (newFighter) {\r\n      var newFighter = newFighter || this.get(\"newFighter\");\r\n      get(this, \"fighter\").pushObject(copy(newFighter));\r\n      set(this, \"newFighter.person\", \"\");\r\n      set(this, \"newFighter.characters\", []);\r\n    }\r\n  }\r\n});\r\n\r\nApp.FcCreateVideoFormComponent = Ember.Component.extend({\r\n  newVideo: {\r\n    url: \"\"\r\n  },\r\n\r\n  keyDown: function (e) {\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault();\r\n      this.send(\"addVideo\");\r\n    } \r\n  },\r\n  actions:{\r\n    addVideo: function (newVideo) {\r\n      var newVideo = newVideo || this.get(\"newVideo\");\r\n      \r\n      get(this, \"videos\").pushObject(copy(newVideo)); \r\n      set(this, \"newVideo.url\", \"\");\r\n    }\r\n  }\r\n});\r\n\r\nApp.FcVideoSummaryComponent = Ember.Component.extend({\r\n  actions:{\r\n    removeVideo: function (video) {\r\n      get(this, \"videos\").removeObject(video); \r\n    }\r\n  }\r\n});\r\n\r\nApp.FcFighterSummaryComponent = Ember.Component.extend({\r\n  tagNames: \"ul\",\r\n  attributeBindings: [\"style\"],\r\n  style: \"list-style-type:none\",\r\n  fighters:[],\r\n  actions:{\r\n    deleteFighter: function (fighter) {\r\n      get(this, \"fighters\").removeObject(fighter);\r\n    }\r\n  }\r\n});\r\n\r\nApp.FcAdminSummaryComponent = Ember.Component.extend({});\r\n\r\nApp.FcAdminSummaryItemComponent = Ember.Component.extend({\r\n  isEditing: false,\r\n  categoryAttribute: \"\",\r\n  // singluar form of type\r\n  typeSingular: function(){\r\n    var type = get(this, 'type');\r\n    if (type){\r\n      if (type == \"matches\")\r\n        return \"match\";\r\n      else if (type == \"people\"){\r\n        return \"person\";\r\n      } else {\r\n      return type.slice(0, type.length - 1);\r\n      }\r\n    }\r\n  }.property('type'),\r\n  // Helper to set value of input element\r\n  initializeValues: function(){\r\n    var item = get(this, \"item\");\r\n    var attr = get(this, \"categoryAttribute\");\r\n    item[\"attrValue\"] = get(item, attr);\r\n  },\r\n  // Label outside of the input field\r\n  categoryLabel: function(){\r\n    type = this.get('type');\r\n    if (type == \"matches\"){\r\n      set(this, \"categoryAttribute\", \"title\");\r\n      return \"Title: \";\r\n    } else if (type == \"users\"){\r\n      set(this, \"categoryAttribute\", \"email\");\r\n      return \"Email: \";\r\n    } else {\r\n      set(this, \"categoryAttribute\", \"name\");\r\n      return \"Name: \";  \r\n    }\r\n  }.property('type'),\r\n  actions:{\r\n    deleteItem: function (type, item) {\r\n      var id = item._id;\r\n      var url = \"/api/v1/\" + type + \"/\" + id + \"/delete\";\r\n      \r\n      Ember.$.post(url, item)\r\n      .then(function(res){\r\n        window.location.reload();\r\n      })\r\n      .fail(function(err){\r\n        alert(\"item was not deleted\");\r\n      })\r\n    },\r\n    modifyItem: function(type, item){\r\n      this.initializeValues();\r\n      set(this, 'isEditing', true); \r\n    },\r\n    saveChanges: function(type, item){\r\n      var field = get(this, \"categoryAttribute\");     \r\n      var type = get(this, \"typeSingular\");\r\n      var data = {};\r\n      data[field] = get(item, 'attrValue');\r\n      \r\n      // build the function call string\r\n      var fnType = window[\"update\" + type.charAt(0).toUpperCase() + type.slice(1)];\r\n      \r\n      \r\n      fnType(data, item)\r\n      .then(function(res){\r\n        window.location.reload();\r\n      })\r\n      .fail(function(err){\r\n        console.log(\"failed\");\r\n        set(this, 'isEditing', false);\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\n\r\n\r\n//HELPERS\r\n\r\n//ajax\r\nvar fetchMatches = function(){\r\n  return Ember.$.get(\"/api/v1/matches\");\r\n};\r\n\r\nvar fetchPeople = function(){\r\n  return Ember.$.get(\"/api/v1/people\");\r\n};\r\n\r\nvar fetchEvents = function(){\r\n  return Ember.$.get(\"/api/v1/events\");\r\n};\r\n\r\nvar fetchGames = function(){\r\nreturn Ember.$.get(\"/api/v1/games\");\r\n};\r\n\r\nvar fetchUsers = function(){\r\nreturn Ember.$.get(\"/api/v1/users\");\r\n};\r\n\r\nvar submitMatch = function (data) {\r\n  return Ember.$.post(\"/api/v1/matches\", data);\r\n};\r\n\r\nvar updateMatch = function(data, match){\r\n  console.log(\"match: \", match);\r\n  if(match._id){\r\n    var url = \"/api/v1/matches/\" + match._id;\r\n    return Ember.$.post(url, data);\r\n  }\r\n  else\r\n    alert(\"problems with update\");\r\n};\r\n\r\nvar updateUser = function(data, user){\r\n  if(user._id){\r\n    var url = \"/api/v1/users/\" + user._id;\r\n    return Ember.$.post(url, data);\r\n  }\r\n  else\r\n    alert(\"problems with update\");\r\n};\r\n\r\nvar updatePerson = function(data, person){\r\n  if(person._id){\r\n    var url = \"/api/v1/people/\" + person._id;\r\n    return Ember.$.post(url, data);\r\n  }\r\n  else\r\n    alert(\"problems with update\");\r\n};\r\n\r\nvar updateEvent = function(data, event){\r\n  if(event._id){\r\n    var url = \"/api/v1/events/\" + event._id;\r\n    return Ember.$.post(url, data);\r\n  }\r\n  else\r\n    alert(\"problems with update\");\r\n};\r\n\r\nvar makeMatchFeatured = function (data) {\r\n  var id = data._id;\r\n  var url = \"/api/v1/matches/\" + id + \"/feature\";\r\n  return Ember.$.post(url, data);\r\n};\r\n\r\nvar deleteMatch = function (data) {\r\n  var id = data._id;\r\n  var url = \"/api/v1/matches/\" + id + \"/delete\";\r\n  return Ember.$.post(url, data);\r\n};\r\n\r\nvar submitData = function (data, type){\r\n  switch(type){\r\n    case \"person\":\r\n      return Ember.$.post(\"/api/v1/people\", data);\r\n      break;\r\n    case \"event\":\r\n      return Ember.$.post(\"/api/v1/events\", data);\r\n      break;\r\n  }\r\n};\r\n\r\n//data conversion\r\nvar convertFighterFieldsToIds = function(fighterArray){\r\n  var convertedArray = [];\r\n  fighterArray.forEach(function(fighter){\r\n    var convertedFighter = {\r\n            \"person\": get(fighter, \"person._id\"), \r\n            \"characters\": get(fighter, \"characters\").mapBy(\"id\")};\r\n    convertedArray.push(convertedFighter);\r\n  });\r\n  return convertedArray;\r\n};\r\n\r\n\r\nvar validateTitle = function (title) {\r\n  return title ? \"\" : \"Must provide a value for title\";\r\n};\r\n\r\nvar validateGame = function (game) {\r\n  return game ? \"\" : \"Must select a game\";\r\n};\r\n\r\nvar validateFighterData = function (fighterData) {\r\n  return fighterData.length > 0 ? \"\" : \"Must include at least one fighter\";\r\n};\r\n\r\nvar validateVideoData = function (videoData) {\r\n  return videoData.length > 0 ? \"\" : \"Must include at least one video\";\r\n};\r\n\r\nvar validateCategory = function (category) {\r\n  return category ? \"\" : \"Must select category\";\r\n};");
  
});

Ember.TEMPLATES["admin/assets/javascripts/ember-component.js"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  


  data.buffer.push("var ms = require(\"../../modules/multi-select\");\r\nvar get = Ember.get;\r\nvar set = Ember.set;\r\n\r\nmodule.exports = Ember.Component.extend({\r\n  setDefaultSearch: function () {\r\n    set(this, \"search\", this.get(\"widget.search\")); \r\n  }.on(\"init\"),\r\n\r\n  focusIn: function () {\r\n    set(this, \"widget\", ms.focus(this.widget, true)); \r\n  },\r\n\r\n  //wrap this in timeout to allow dropdown to be clicked before vanishing\r\n  focusOut: function (e) {\r\n    Ember.run.later(this, function () {\r\n      set(this, \"widget\", ms.focus(this.widget, false)); \r\n    }, 100);\r\n  },\r\n\r\n  //wrap selections with \"active\" for templating\r\n  matches: function () {\r\n    var matches = this.get('widget.matches'); \r\n    var selectionIndex = this.get('widget.selectionIndex');\r\n\r\n    return matches.map(function (match, index) {\r\n      return {\r\n        match: match,\r\n        active: selectionIndex === index\r\n      }; \r\n    });\r\n  }.property(\"widget.matches.[]\", \"widget.selectionIndex\"),\r\n\r\n  //observes our widget's selections and sets them to a bound prop\r\n  updateValues: function () {\r\n    set(this, \"values\", this.get('widget.selections'));\r\n  }.observes(\"widget.selections.[]\"),\r\n\r\n  //when search changes, update widget\r\n  updateSearch: function () {\r\n    set(this, \"widget\", ms.updateSearch(this.widget, this.search)); \r\n  }.observes(\"search\"),\r\n\r\n  actions: {\r\n    addSelection: function (value) {\r\n      set(this, \"widget\", ms.addSelection(this.widget, value));\r\n      set(this, \"search\", \"\");\r\n    },\r\n\r\n    addActiveSelection: function () {\r\n      set(this, \"widget\", ms.addActiveSelection(this.widget));\r\n      set(this, \"search\", \"\");\r\n    },\r\n\r\n    removeSelection: function (selection) {\r\n      var index = this.widget.selections.indexOf(selection);\r\n\r\n      set(this, \"widget\", ms.removeSelection(this.widget, index));\r\n    },\r\n\r\n    removeLastSelection: function () {\r\n      set(this, \"widget\", ms.removeLastSelection(this.widget));\r\n    }\r\n  }\r\n});");
  
});